{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import streamlit as st\
import pandas as pd\
import smtplib\
from email.message import EmailMessage\
\
# Laden der Fragen aus der Excel-Datei\
def load_questions():\
    file_path = "Fragen Profil.xlsx"  # Lokale Datei oder URL\
    df = pd.read_excel(file_path)\
    return df\
\
# Speichern der Antworten als Excel-Datei\
def save_answers(responses):\
    df = pd.DataFrame(responses, columns=["Frage", "Antwort", "Offene Frage 1", "Offene Frage 2", "Offene Frage 3", "Offene Frage 4"])\
    output_path = "user_responses.xlsx"\
    df.to_excel(output_path, index=False)\
    return output_path\
\
# E-Mail mit der Auswertung versenden\
def send_email(attachment_path):\
    sender_email = "your-email@example.com"  # Hier eigene E-Mail eintragen\
    receiver_email = "azn17213@t-online.de"\
    subject = "Neue Insights Profil-Auswertung"\
    body = "Eine neue Auswertung wurde abgeschlossen. Die Ergebnisse sind als Anhang beigef\'fcgt."\
\
    msg = EmailMessage()\
    msg["From"] = sender_email\
    msg["To"] = receiver_email\
    msg["Subject"] = subject\
    msg.set_content(body)\
\
    with open(attachment_path, "rb") as f:\
        file_data = f.read()\
        file_name = "Ergebnisse.xlsx"\
    \
    msg.add_attachment(file_data, maintype="application", subtype="octet-stream", filename=file_name)\
\
    with smtplib.SMTP("smtp.example.com", 587) as server:  # SMTP-Server anpassen\
        server.starttls()\
        server.login("your-email@example.com", "your-password")\
        server.send_message(msg)\
\
# Hauptfunktion der App\
def main():\
    st.title("Pers\'f6nlichkeitsfragebogen")\
    questions = load_questions()\
    num_questions = len(questions)\
    \
    # Session-State f\'fcr Fortschritt speichern\
    if "current_question" not in st.session_state:\
        st.session_state.current_question = 0\
        st.session_state.responses = []\
    \
    # Frage anzeigen\
    if st.session_state.current_question < num_questions:\
        question = questions.iloc[st.session_state.current_question]\
        \
        st.subheader(f"Frage \{st.session_state.current_question + 1\}/\{num_questions\}")\
        st.write(question["Frage"])\
        \
        # Multiple-Choice-Antworten\
        answer = st.radio(\
            "W\'e4hlen Sie eine Antwort:",\
            ["Stimme voll zu", "Stimme eher zu", "Neutral", "Stimme eher nicht zu", "Stimme gar nicht zu"],\
            index=2\
        )\
        \
        # Offene Fragen\
        open_responses = []\
        for i in range(4):\
            response = st.text_input(f"Offene Frage \{i + 1\}:", max_chars=160)\
            open_responses.append(response)\
        \
        # Antworten speichern und zur n\'e4chsten Frage wechseln\
        if st.button("Weiter"):\
            st.session_state.responses.append([question["Frage"], answer] + open_responses)\
            st.session_state.current_question += 1\
            st.experimental_rerun()\
    else:\
        st.success("Fragebogen abgeschlossen! Ihre Antworten wurden gespeichert.")\
        output_file = save_answers(st.session_state.responses)\
        st.download_button(\
            label="Download Ergebnisse als Excel",\
            data=open(output_file, "rb"),\
            file_name="Ergebnisse.xlsx",\
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"\
        )\
        send_email(output_file)\
\
if __name__ == "__main__":\
    main()\
}